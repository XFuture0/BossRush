using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MaxVulnerability : MonoBehaviour
{
    public int MaxVulnerabilityCount = 0;//¼«ÖÂÒ×ÉË²ãÊý
    public void SetVulnerability(CharacterStats Attacker)
    {
        StartCoroutine(OnVulnerability(Attacker));
        if (Attacker.CharacterData_Temp.BloodyBomb && MaxVulnerabilityCount >= 10)
        {
            StopAllCoroutines();
            GameManager.Instance.Boss().NowHealth -= MaxVulnerabilityCount * GameManager.Instance.Player().WeaponAttackPower;
            if (MaxVulnerabilityCount > 0)
            {
                GameManager.Instance.Player().AttackBonus -= GameManager.Instance.Player().Vulnerability_AttackBonus * MaxVulnerabilityCount;
                GameManager.Instance.Player().CriticalDamageRate -= GameManager.Instance.Player().Vulnerability_CriticalRate * MaxVulnerabilityCount;
                MaxVulnerabilityCount = 0;
            }
        }
    }
    private IEnumerator OnVulnerability(CharacterStats Attacker)
    {
        if (Attacker.CharacterData_Temp.SlowBloodthirsty)
        {
            GameManager.Instance.Boss().NowHealth -= Attacker.CharacterData_Temp.WeaponAttackPower * 0.5f;
        }
        if (Attacker.CharacterData_Temp.BloodthirstyIncreasesAnger)
        {
            Attacker.CharacterData_Temp.AngerValue += 0.02f;
        }
        if (Attacker.CharacterData_Temp.BloodthirstyEmblem)
        {
            var BloodRate = UnityEngine.Random.Range(0f, 1f);
            if (BloodRate < 0.1f)
            {
                Attacker.CharacterData_Temp.NowHealth += 1;
            }
        }
        MaxVulnerabilityCount++;
        Attacker.CharacterData_Temp.AttackBonus += Attacker.CharacterData_Temp.Vulnerability_AttackBonus + 0.2f;
        Attacker.CharacterData_Temp.CriticalDamageRate += Attacker.CharacterData_Temp.Vulnerability_CriticalRate + 0.1f;
        yield return new WaitForSeconds(Attacker.CharacterData_Temp.VulnerabilityTime);
        Attacker.CharacterData_Temp.AttackBonus -= Attacker.CharacterData_Temp.Vulnerability_AttackBonus + 0.2f;
        Attacker.CharacterData_Temp.CriticalDamageRate -= Attacker.CharacterData_Temp.Vulnerability_CriticalRate + 0.1f;
        MaxVulnerabilityCount--;
    }
    private void OnDisable()
    {
        StopAllCoroutines();
        if (MaxVulnerabilityCount > 0)
        {
            GameManager.Instance.Player().AttackBonus -= (GameManager.Instance.Player().Vulnerability_AttackBonus + 0.2f) * MaxVulnerabilityCount;
            GameManager.Instance.Player().CriticalDamageRate -= (GameManager.Instance.Player().Vulnerability_CriticalRate * 0.1f) * MaxVulnerabilityCount;
            MaxVulnerabilityCount = 0;
        }
    }
}
