using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Vulnerability : MonoBehaviour
{
    public int AllVulnerabilityCount;
    public int VulnerabilityCount = 0;//Ò×ÉË²ãÊý
    private bool IsBloodthirstyWeapon;
    private bool IsChasingThroughInjuries;
    private void Update()
    {
        
        AllVulnerabilityCount = VulnerabilityCount + gameObject.GetComponent<MaxVulnerability>().MaxVulnerabilityCount;
        OnBloodthirstyWeapon();
        OnChasingThroughInjuries();
    }
    public void SetVulnerability(CharacterStats Attacker)
    {
        StartCoroutine(OnVulnerability(Attacker));
        if (Attacker.CharacterData_Temp.BloodyBomb && VulnerabilityCount >= 10)
        {
            StopAllCoroutines();
            GameManager.Instance.Boss().NowHealth -= VulnerabilityCount * GameManager.Instance.Player().WeaponAttackPower;
            if (VulnerabilityCount > 0)
            {
                GameManager.Instance.Player().AttackBonus -= GameManager.Instance.Player().Vulnerability_AttackBonus * VulnerabilityCount;
                GameManager.Instance.Player().CriticalDamageRate -= GameManager.Instance.Player().Vulnerability_CriticalRate * VulnerabilityCount;
                VulnerabilityCount = 0;
            }
        }
    }
    private IEnumerator OnVulnerability(CharacterStats Attacker)
    {
        if (Attacker.CharacterData_Temp.SlowBloodthirsty)
        {
            GameManager.Instance.Boss().NowHealth -= Attacker.CharacterData_Temp.WeaponAttackPower * 0.5f;
        }
        if (Attacker.CharacterData_Temp.BloodthirstyIncreasesAnger)
        {
            Attacker.CharacterData_Temp.AngerValue += 0.02f;
        }
        if (Attacker.CharacterData_Temp.BloodthirstyEmblem)
        {
            var BloodRate = UnityEngine.Random.Range(0f, 1f);
            if(BloodRate < 0.1f)
            {
                Attacker.CharacterData_Temp.NowHealth += 1;
            }
        }
        VulnerabilityCount++;
        Attacker.CharacterData_Temp.AttackBonus += Attacker.CharacterData_Temp.Vulnerability_AttackBonus;
        Attacker.CharacterData_Temp.CriticalDamageRate += Attacker.CharacterData_Temp.Vulnerability_CriticalRate;
        yield return new WaitForSeconds(Attacker.CharacterData_Temp.VulnerabilityTime);
        Attacker.CharacterData_Temp.AttackBonus -= Attacker.CharacterData_Temp.Vulnerability_AttackBonus;
        Attacker.CharacterData_Temp.CriticalDamageRate -= Attacker.CharacterData_Temp.Vulnerability_CriticalRate;
        VulnerabilityCount--;
    }
    private void OnBloodthirstyWeapon()
    {
        if (GameManager.Instance.Player().BloodthirstyWeapon)
        {
            if (AllVulnerabilityCount >= 5 && !IsBloodthirstyWeapon)
            {
                IsBloodthirstyWeapon = true;
                GameManager.Instance.Player().WeaponCount += 1;
            }
            if (AllVulnerabilityCount < 5 && IsBloodthirstyWeapon)
            {
                IsBloodthirstyWeapon = false;
                GameManager.Instance.Player().WeaponCount -= 1;
            }
        }
    }
    private void OnChasingThroughInjuries()
    {
        if (GameManager.Instance.Player().ChasingThroughInjuries)
        {
            if (AllVulnerabilityCount > 0 && !IsChasingThroughInjuries)
            {
                IsChasingThroughInjuries = true;
                GameManager.Instance.Player().SpeedRate += 0.1f;
                GameManager.Instance.Player().AttackRate -= 0.1f;
            }
            if (AllVulnerabilityCount <= 0 && IsChasingThroughInjuries)
            {
                IsChasingThroughInjuries = false;
                GameManager.Instance.Player().SpeedRate -= 0.1f;
                GameManager.Instance.Player().AttackRate += 0.1f;
            }
        }
    }
    private void OnDisable()
    {
        StopAllCoroutines();
        if (VulnerabilityCount > 0)
        {
            GameManager.Instance.Player().AttackBonus -= GameManager.Instance.Player().Vulnerability_AttackBonus * VulnerabilityCount;
            GameManager.Instance.Player().CriticalDamageRate -= GameManager.Instance.Player().Vulnerability_CriticalRate * VulnerabilityCount;
            VulnerabilityCount = 0;
        }
    }
}
